/* eslint-disable */
'use strict';

const CleanCSS = require("clean-css"),
  fs = require("fs"),
  sass = require("node-sass"),
  path = require("path");

var release,
  paths;

function writeFile(savPath, data) {
  return new Promise((resolve) => {
    fs.writeFile(savPath, data, "utf8", function (err) {
      if (err) {
        resolve(err);
      } else {
        resolve();
      }
    });
  })
}

function processSass(input) {
  return new Promise((resolve) => {
    // Parse the path
    var fileName = path.parse(input).name;

    // Turn the sass into css
    sass.render({
      file: input,
      linefeed: "crlf",
      omitSourceMapUrl: true
    }, (err, result) => {
      if (err) console.error(err);

      // Minify the file if not in dev mode.
      if (release) {
        var minified = new CleanCSS({
          level: 1
        }).minify(result.css, function (err, output) {
          if (err) console.warn(err);
          // Write the file, and when that's done resolve the promise of processing sass for the file.
          writeFile(paths.destFolder + fileName + ".css", output.styles).then((error) => {
            if (error) console.warn(error);
            resolve();
          });
        });
      } else {
        // Write the file, and when that's done resolve the promise of processing sass for the file.
        writeFile(paths.destFolder + fileName + ".css", result.css).then((error) => {
          if (error) console.warn(error);
          resolve();
        });
      }
    });
  });
}


/**
 * 
 * @param {Object} inputObj
 * @param {Array} inputObj.src - An array of source file paths to be converted to sass
 * @param {String} inputObj.destFolder - A folder location where the css files will be saved to, with the filename being the same as the main sass filename, but with a .css end.
 * @param {Boolean} inputObj.release - If the files should also be minified or not.
 * @returns {Promise} - Returns a promise that'll be resolved when all the files are done.
 */
module.exports = function (inputObj) {
  paths = inputObj; // So that this whole script can access paths that are set.
  if (inputObj.release !== true) {
    release = false;
    console.log("Note: Please add 'release: true' to the object that is passed to easy-sass for minimizing  your css.");
  } else {
    release = true;
  }
  return new Promise((resolve) => {
    var amount = paths.src.length || Object.keys(paths.src).length,
      resolved = 0;

    for (var i = 0; amount > i; i++) {
      processSass(paths.src[i]).then(() => {
        resolved++;
        if (resolved === amount) {
          resolve();
        }
      });
    };

  });
}